#!/usr/bin/env python

"""
enforce_permissions

author: Joel Nises

todo: initial enforcement
todo: make sure we don't try to change the group to one we are not a part of
todo: prefer the var run log if writable
todo: fix the logging
todo: add options for log file and pid file
"""

usage = """
Usage: %prog [options] <directory>

Enforce permissions using inotify events.
"""

#pidfile = "/var/run/enforce_permissions.pid"
#logfile = "/var/log/enforce_permissions.log"

pidfile = "/tmp/enforce_permissions.pid"
logfile = "/tmp/enforce_permissions.log"

import optparse
import pyinotify
import functools
import os
import logging
import stat
import pwd
import grp
import sys

permissionMask = stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO

def octalPermissionToMode(perm):
    """
    where perm is a string with three values from 0 to 7
    """

    uperm = int(perm[0])
    gperm = int(perm[1])
    operm = int(perm[2])

    return \
        (stat.S_IRUSR if uperm & 4 != 0 else 0) | \
        (stat.S_IWUSR if uperm & 2 != 0 else 0) | \
        (stat.S_IXUSR if uperm & 1 != 0 else 0) | \
        (stat.S_IRGRP if gperm & 4 != 0 else 0) | \
        (stat.S_IWGRP if gperm & 2 != 0 else 0) | \
        (stat.S_IXGRP if gperm & 1 != 0 else 0) | \
        (stat.S_IROTH if operm & 4 != 0 else 0) | \
        (stat.S_IWOTH if operm & 2 != 0 else 0) | \
        (stat.S_IXOTH if operm & 1 != 0 else 0)

class EnforceGroupHandler(pyinotify.ProcessEvent):
    def my_init(self, user = None, group = None,
                filePermissions = None, dirPermissions = None):
        self.user = user
        self.group = group
        self.filePermissions = filePermissions
        self.dirPermissions = dirPermissions


    def process_default(self, event):
        """
        change anything that doesn't match
        """

        path = event.pathname
        s = os.stat(path)

        # First make sure we are root, or own the file. If we aren't
        # root, the requested uid needs to either be unset or the same
        # as the file
        if os.geteuid() == 0 or (s.st_uid == os.getuid() and (not self.user or self.user == s.st_uid)): 
            if self.user:
                if s.st_uid != self.user:
                    logging.debug("user set for file %s" % path)
                    os.chown(path, self.user, -1)

            if self.group:
                if s.st_gid != self.group:
                    logging.debug("group set for file %s" % path)
                    os.chown(path, -1, self.group)

            mode = s.st_mode

            if stat.S_ISDIR(mode):
                if self.dirPermissions and mode & permissionMask != self.dirPermissions:
                    logging.debug("permissions set for directory %s" % path)
                    os.chmod(path, self.dirPermissions)

            else:
                if self.filePermissions and mode & permissionMask != self.filePermissions:
                    logging.debug("permissions set for file %s" % path)
                    os.chmod(path, self.filePermissions)

        else:
            logging.warning("not allowed to modify the permissions of that file")

            
    
if __name__ == "__main__":
    logging.basicConfig(filename = logfile, level = logging.DEBUG)

    logging.info("Enforce watch started")

    try:
        p = optparse.OptionParser(usage = usage)
        p.add_option("-f", "--file", dest = "file_permissions", 
                     help = "The file permission to enforce", 
                     action = "store", type = "string")
        p.add_option("-d", "--directory", dest = "dir_permissions", 
                     help = "The directory permission to enforce", 
                     action = "store", type = "string")
        p.add_option("-u", "--user", dest = "user", 
                     help = "The user to enforce", 
                     action = "store", type = "string")
        p.add_option("-g", "--group", dest = "group", 
                     help = "The group to enforce", 
                     action = "store", type = "string")
        
        (options, args) = p.parse_args()

        userid = None
        groupid = None
        file_permissions = None
        dir_permissions = None

        if len(args) < 1:
            errormsg = "no files to watch"
            logging.warning(errormsg)
            exit(errormsg)

        # convert the user to uid
        try:
            if options.user:
                userid = int(options.user)
        except ValueError:
            try:
                userid = pwd.getpwnam(options.user).pw_uid
            except KeyError:
                errormsg = "there is no user named %s on this system" % options.user
                logging.error(errormsg)
                exit(errormsg)

        # make sure we are allowed to set that particular uid
        if userid and userid != os.getuid() and os.getuid() != 0:
            errormsg = "we are not allowed to change the ownership of a file to the user %s" % options.user
            logging.error(errormsg)
            exit(errormsg)

        # convert the group to gid
        try:
            if options.group:
                groupid = int(options.group)
        except ValueError:
            try:
                groupid = grp.getgrnam(options.group).gr_gid
            except KeyError:
                errormsg = "there is no group named %s on this system" % options.group
                logging.error(errormsg)
                exit(errormsg)

        # make sure the specified group is ok
        group_membership = (grp.getgrnam(x).gr_gid for x in subprocess.Popen(["groups"], stdout = subprocess.PIPE).communicate()[0].split())
        if groupid and os.getuid() != 0 and (groupid not in group_membership):
            errormsg = "we cannot change the group of the file to %s since we are not root and we are not part of the group in question" % options.group
            logging.error(errormsg)
            exit(errormsg)

        try:
            if options.file_permissions and options.dir_permissions:
                file_permissions = octalPermissionToMode(options.file_permissions)
                dir_permissions = octalPermissionToMode(options.dir_permissions)
            elif (options.file_permissions != None) != (options.dir_permissions != None):
                errormsg = "both or none of file and directory permissions must be set"
                logging.error(errormsg)
                exit(errormsg)
        except:
            errormsg = "file and directory must be on the form 755 or similar"
            logging.error(errormsg)
            exit(errormsg)

        wm = pyinotify.WatchManager()
        notifier = pyinotify.Notifier(wm, EnforceGroupHandler(user = userid,
                                                              group = groupid,
                                                              filePermissions = file_permissions,
                                                              dirPermissions = dir_permissions))

        for filename in args:
            logging.debug("adding watch for file %s"%filename)
            wm.add_watch(filename, pyinotify.IN_CREATE | pyinotify.IN_ATTRIB, rec = True, auto_add = True)

        notifier.loop(daemonize = True, 
                      pid_file = pidfile, force_kill = True,
                      stdout = logfile, stderr = logfile)

    except Exception as e:
        logging.error(e)
        raise
        
